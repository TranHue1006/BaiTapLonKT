package tests;

import base.BaseTest;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebElement;
import org.testng.annotations.Test;
import pages.ForgotPasswordPage;
import utils.ExcelUtils;

import java.text.SimpleDateFormat;
import java.util.Date;

public class ForgotPasswordTest extends BaseTest {

    private String timeNow() {
        return new SimpleDateFormat("HH:mm:ss").format(new Date());
    }

    private void log(String level, String message) {
        System.out.println("[" + timeNow() + " " + level + "] " + message);
    }

    @Test
    public void testForgotPasswordFromExcel() throws Exception {
        log("INFO", "üöÄ B·∫ÆT ƒê·∫¶U CH·∫†Y TEST QU√äN M·∫¨T KH·∫®U T·ª™ EXCEL");


        ExcelUtils.setExcelFile("QMK");
        int rowCount = ExcelUtils.getLastUsedRow();

        for (int i = 1; i < rowCount; i++) {
            log("INFO", "---------------------------------------------");
            log("INFO", "üß™ Test Case #" + i);

            String email = ExcelUtils.getCellData(i, 0);
            String expected = ExcelUtils.getCellData(i, 1);


            if ((email == null || email.trim().isEmpty()) &&
                    (expected == null || expected.trim().isEmpty())) {
                log("WARN", "‚ö†Ô∏è D√≤ng " + i + " tr·ªëng -> b·ªè qua.");
                continue;
            }

            driver.get("https://www.badhabitsstore.vn/account/login");
            ForgotPasswordPage forgotPasswordPage = new ForgotPasswordPage(driver);

            log("INFO", "üîó Click v√†o li√™n k·∫øt 'Qu√™n m·∫≠t kh·∫©u?'...");
            forgotPasswordPage.clickForgotPasswordLink();
            Thread.sleep(1000);

            if (email.equalsIgnoreCase("(ƒë·ªÉ tr·ªëng)") || email.trim().isEmpty()) {
                email = "";
            }

            log("INFO", "üìß Nh·∫≠p email: '" + email + "'");
            forgotPasswordPage.enterEmail(email);
            forgotPasswordPage.clickSubmit();

            String actual = "";


            try {
                WebElement emailField = forgotPasswordPage.getEmailField();
                JavascriptExecutor js = (JavascriptExecutor) driver;
                actual = (String) js.executeScript(
                        "return arguments[0].validationMessage;", emailField);
            } catch (Exception ignored) { }


            if (actual == null || actual.isEmpty()) {
                actual = forgotPasswordPage.getMessage();
            }


            String currentUrl = driver.getCurrentUrl();
            if (currentUrl.contains("/account/login") &&
                    (actual == null || actual.isEmpty())) {
                actual = "Li√™n k·∫øt ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n. Vui l√≤ng ki·ªÉm tra!";
            }


            ExcelUtils.setCellData(i, 2, actual);


            boolean isPass = false;
            String actualLower = actual.toLowerCase();
            String expectedLower = expected.toLowerCase();

            if (expectedLower.contains("vui l√≤ng nh·∫≠p") || expectedLower.contains("ƒëi·ªÅn email")) {
                if (actualLower.contains("please fill out") || actualLower.contains("vui l√≤ng")) {
                    isPass = true;
                }
            } else if (expectedLower.contains("ƒë·ªãnh d·∫°ng") || expectedLower.contains("kh√¥ng h·ª£p l·ªá")) {
                if (actualLower.contains("please include") || actualLower.contains("h·ª£p l·ªá")) {
                    isPass = true;
                }
            } else if (expectedLower.contains("kh√¥ng t·ªìn t·∫°i")) {
                if (actualLower.contains("kh√¥ng t·ªìn t·∫°i") || actualLower.contains("no account")) {
                    isPass = true;
                }
            } else if (expectedLower.contains("li√™n k·∫øt") || expectedLower.contains("ƒë√£ g·ª≠i")) {
                if (actualLower.contains("li√™n k·∫øt") || actualLower.contains("ƒë√£ ƒë∆∞·ª£c g·ª≠i")) {
                    isPass = true;
                }
            }


            if (isPass) {
                ExcelUtils.setCellData(i, 3, "PASS");
                log("INFO", "‚úÖ [PASS] K·∫øt qu·∫£ ƒë√∫ng nh∆∞ mong ƒë·ª£i.");
            } else {
                ExcelUtils.setCellData(i, 3, "FAIL");
                log("ERROR", "‚ùå [FAIL] K·∫øt qu·∫£ KH√îNG kh·ªõp mong ƒë·ª£i!");
                log("INFO", "üëâ Mong ƒë·ª£i: " + expected);
                log("INFO", "üëâ Th·ª±c t·∫ø: " + actual);
            }

            Thread.sleep(1000);
        }

        log("INFO", "üèÅ HO√ÄN T·∫§T CH·∫†Y TEST QU√äN M·∫¨T KH·∫®U");
    }
}
